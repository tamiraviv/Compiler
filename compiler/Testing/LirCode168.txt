# Error Strings:
str_err_checkNullRef: "Runtime Error: Null pointer dereference!" 
str_err_checkArrayAccess: "Runtime Error: Array index out of bounds!" 
str_err_checkSize: "Runtime Error: Array allocation with non-positive array size!" 
str_err_checkZero: "Runtime Error: Division by zero!" 

str0: "" 
_DV_Fibonacci: []

# Error verification functions:

__checkNullRef:
Move a, R01
Compare 0, R01
JumpTrue _error_checkNullRef
Return 9999


_error_checkNullRef:
Library __println(str_err_checkNullRef), Rdummy
Library __exit(1), Rdummy
Return 9999

__checkArrayAccess:
ArrayLength a, R01
Compare i, R01
JumpLE _error_checkArrayAccess
Move i, R01
Compare 0, R01
JumpL _error_checkArrayAccess
Return 9999

_error_checkArrayAccess:
Library __println(str_err_checkArrayAccess), Rdummy
Library __exit(1), Rdummy
Return 9999

__checkSize:
Move n, R01
Compare 0, R01
JumpLE _error_checkSize
Return 9999

_error_checkSize:
Library __println(str_err_checkSize), Rdummy
Library __exit(1), Rdummy
Return 9999

__checkZero:
Move b, R01
Compare 0, R01
JumpTrue _error_checkZero
Return 9999

_error_checkZero:
Library __println(str_err_checkZero), Rdummy
Library __exit(1), Rdummy
Return 9999



_ic_main:
# Assignment:
# Evaluate the expression:
# Assign the expression:
Move 10, v2n
# //Assignment
# Assignment:
# Evaluate the expression:
StaticCall _Fibonacci_fib(v2n=v2n), R0
# Assign the expression:
Move R0, v2r
# //Assignment
Library __printi(v2r), Rdummy
Library __println(str0), Rdummy
Library __exit(0), Rdummy

_Fibonacci_fib:
# IF statement:
Move v2n, R1
Compare 2, R1
JumpL _LT_0lable
Move 0, R1
Jump _end_0lable
_LT_0lable:
Move 1, R1
_end_0lable:
# Done accepting IF boolean expression
Move R1, R2
Compare 0, R2
JumpFalse _then_1lable
Jump _else_1lable
_then_1lable:
Return v2n
Jump _end_1lable
_else_1lable:
_end_1lable:
# //IF statement
Move v2n, R3
Sub 1, R3
StaticCall _Fibonacci_fib(v2n=R3), R4
Move v2n, R5
Sub 2, R5
StaticCall _Fibonacci_fib(v2n=R5), R6
Add R6, R4
Return R4

