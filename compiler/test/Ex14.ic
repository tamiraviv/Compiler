/**
 * This class contains four static methods given in Maman 14.
 * 
 * @author Tamir Aviv
 * @version 1.0
 */

//****************************************************************
//*     Ex14.java      Author: Tamir Aviv       ID: 305652000    *
//*                                                              *
//*   This class contains four static methods given in Maman 14  *
//****************************************************************

class Ex14
{

	static void main(string[] args)
	{
		Library.println("before the sort");
		Library.println("");
		
		int[] a = new int[10];
		a[0] = 9;
		a[1] = 7;
		a[2] = 4;
		a[3] = 8;
		a[4] = 1;
		a[5] = 10;
		a[6] = 2;
		a[7] = 6;
		a[8] = 5;
		a[9] = 3;
		
		int i=0;
		
		i=0;
		while(i<10)
		{
			Library.printi(a[i]);
			Library.print(" ");		
			i = i+1;
		}
		
		Library.println("");
		Library.println("");
		Library.println("after the sort");
		Library.println("");
		
		Ex14.quicksort(a);
		
		i = 0;
		while(i<10)
		{
			Library.printi(a[i]);
			Library.print(" ");		
			i = i+1;
		}
		
	}
   
   /**
    * QUESTION #1 paragraph A.
    * Checking if there is any number that appears only ones in a sorted array.
    * Time Complexity: O(n*log n) - quicksort time complexity is O(n*log n) , and n is the number of cells in the array.
    * Space Complexity: O(log n) - quicksort space complexity is O(n*log n) , and n is the number of cells in the array.
    * @param valuea The array to search in.
    * @return true - if there is any number that appears only ones in a sorted array, and false otherwise.
    */
   static boolean single (int[] values)
   {  
	   int i;
       if(values==null || values.length==0) //check that the array is not null or in the size of zero.
       {
           return false;
       }
       if(values.length==1) // if there is only one cell in the array, so it's must be single
       {
           return true;
       }

       Ex14.quicksort(values);
	   
       if(values[0] != values[1] || values[values.length-1] != values[values.length-2]) // checking the edge of the array 
       {
           return true;
       }
	   
	   i = 1;
       while(i<values.length-1) // moving only inside the array and not on the edge, and check to see if there is number that not equals to the number after it and before it - then it's a single number.
       {
           if(values[i] != values[i-1] && values[i] != values[i+1])
           {
               return true;
           }
		   i = i+1;
       }
        
       return false;
   }

   /**
    * QUESTION #1 paragraph B.
    * Checking if there is any number that appears k times or more in the array.
    * Time Complexity: O(n*log n) - quicksort time complexity is O(n*log n) , and n is the number of cells in the array.
    * Space Complexity: O(log n) - quicksort space complexity is O(n*log n) , and n is the number of cells in the array.
    * @param valuea - The array to search in.
    * @param k - number of times that any number appears in the array.
    * @return true - if there is any number that appears k times or more in a sorted array, and false otherwise.
    */
   static boolean kTimes(int[] values,int k)
   {
       if(values==null || values.length==0) //check that the array is not null or in the size of zero.
       {
           return false;
       }
       int i;
       Ex14.quicksort(values);
       int counter=1;
       
	   i = 0;
	   while(i<values.length-1)
       {
           if(values[i]==values[i+1]) 
           {
               counter = counter+1; // counting how much similer cell's value we have.
           }
           else
           {
               if(counter>=k) // check to see if it's appears k times or more, and retun true or reset to 1 respectively.
               {
                   return true;
               }
               else
               {
                   counter=1;
               }
           }
		   i = i+1;
       }
        
       if(counter>=k) //check to see if we ended the for loop without checking if it's appears k times or more
       {
           return true;
       }
       return false;
   }
    
   /**
    * QUESTION #2.
    * Searching for the highest number that symbolize the drop between the peak and the valley (highest drop).
    * Time Complexity: O(n) - n is the number of cells in the array.
    * Space Complexity: O(1)
    * @param a - The array to search in.
    * @return the highest drop between the peak and the valley, if it's 0 return 0, if it's only raising return -1.
    */
   static int maximalDrop(int [] a)
   {
       if(a==null)
       {
           return -1;
       }
       if(a.length<=1)
       {
           return -1;
       }
	   
       int max; // the peak and the valley.
	   int min;
       int difference; 
	   int tempMax;
       int maxDrop=-1;
       boolean plane= true;
	   max = 0;
	   min=1;
	   while(min<a.length)
       {
           if(a[min]!= a[min-1] && plane)
           {
               plane = false;
           }
           if(a[max]>a[min])
           {
               difference=a[max]-a[min]; //check the difference between the peak and the valley.
               tempMax=maxDrop;
               maxDrop=Math.max(difference,tempMax); // check to see what is the highest drop so far
           }
           else
           {
                max=min;
           }
		   min = min + 1;
        }
       if(plane)
       {
           return 0;
       }
       return maxDrop;
   }
    
   /**
    * QUESTION #3 paragraph A.
    * Checking what is the highest common divisor of 2 numbers.
    * @param n - the first integer.
    * @param m - the second integer
    * @return the highest common divisor of 2 numbers.
    */
   static int gcd (int n, int m)
   {
       if (n==m)
       {
           return n;
       }
       if (n>m)
       {
           return Ex14.gcd(m, n-m);
       }
       return Ex14.gcd(n, m-n);
   }
    
   /**
    * QUESTION #3 paragraph B.
    * Checking if all the number in the array are foreign number ( means that the highest common divisor of two numbers is: 1 )
    * @param values - array of integers.
    * @return true if all the number in the array are foreign number, and false otherwise.
    */    
   static boolean checkGCD(int[] values)
   {
       if(values==null)
       {
           return false;
       }
       if(values.length<=1)
       {
           return true;
       }
       return Ex14.checkGCD2(values,0,1);
   }
    
   /**
    * using overloading to simplify the process.
    * i and j are symbolize the index in the array.
    * @param values - array of integers.
    * @param i - index of row.
    * @param j - index of col.
    * @return true if all the number in the array are foreign number, and false otherwise.
    */  
   static boolean checkGCD2(int[] values, int i, int j)
   {
       if(i>values.length-1) // check to see if we ended the array
       {
           return true;
       }
       if(j>values.length-1) // check to see if we ended the array
       {
           return Ex14.checkGCD2(values,i+1,i+2); // we check with a new start point - first is (values,0,1) and then (values,1,2) and then (values,2,3) and so on.
       }
       if(Ex14.gcd(values[i],values[j])!=1) // if the highest common divisor between 2 numbers isn't 1, then return false.
       {
           return false;
       }
       else
       {
           return (Ex14.checkGCD2(values,i,j+1));
       }
   }
    
   /**
    * QUESTION #4 paragraph B.
    * Checking how many legal routes there is between the start point (0,0) and the end point (mat.length-1,mat[0].length-1)
    *  @param mat - array of integers between 0-100.
    *  @return the number of legal routes
    */     
   static int countPaths (int[][] mat)
   {
       if(mat==null)
       {
           return 0;
       }
       if(mat.length==0 || mat.length==1)
       {
           return 0;
       }          
       return Ex14.countPaths2(mat,0,0);
   }
    
   /**
    * using overloading to simplify the process.
    * i and j are symbolize the index in the array.
    * @param mat - array of integers between 0-100.
    * @param i - index of row.
    * @param j - index of col.
    * @return the number of legal routes
    */  
   static int countPaths2(int[][] mat,int i,int j)
   {
       if(i>mat.length-1 || j>mat[0].length-1) //that's mean that we didn't find a legal routes, and we have cross the boundaries
       {
           return 0;
       }
       if(i==mat.length-1 && j==mat[0].length-1) // found a legal routes
       {
           return 1;
       }
       if(mat[i][j]==0) // to avoid an infinite loop
       {
           return 0;
        }
       if(mat[i][j]/10==mat[i][j]%10) // if it's lead to the same place - then avoid from double counting
       {  
           return (Ex14.countPaths2(mat,i+(mat[i][j])%10,j+(mat[i][j])/10));  // we add to i the group of ones and to j the grop of tens
       }
       else 
       {   // ones we add to i the group of ones and to j the grop of tens , and seconde we add to i the group of tens and to j the grop of ones  
           return (Ex14.countPaths2(mat,i+(mat[i][j])%10,j+(mat[i][j])/10) + Ex14.countPaths2(mat,i+(mat[i][j])/10,j+(mat[i][j])%10));
       }
   }
    
   //the quickSort cod for QUESTION #1 (copied from professor Rosenshein lecture (chapter 16))
   static void quicksort(int[] a) 
   {
       Ex14.quicksort2(a, 0, a.length-1);
   }
   static void quicksort2(int[] a, int lo, int hi) 
   {
       int m;
       if (hi > lo+1) 
	   {
           m = Ex14.partition(a, lo, hi);
           Ex14.quicksort2(a, lo, m-1);
           Ex14.quicksort2(a, m+1, hi);
        }
       else
           if (hi == lo+1 && a[lo] > a[hi])
               Ex14.swap(a, lo, hi);
   }
   static void swap(int[ ] data, int first, int second) 
   {
       int temp;
       temp = data[first];
       data[first] = data[second];
       data[second] = temp;
   }
   static int partition(int[] a, int lo, int hi) 
   {
       Ex14.swap(a, lo, Ex14.medianLocation(a, lo+1, hi, (lo+hi)/2));
       int m = Ex14.partition2(a, lo+1, hi, a[lo]);
       Ex14.swap(a, lo, m);
       return m;
   }
   static int partition2(int[] a, int lo, int hi, int pivot) {
       if (hi == lo)
           if (a[lo] < pivot)
               return lo;
           else return lo-1;
           else if (a[lo] <= pivot)
               return Ex14.partition2(a, lo+1, hi, pivot);
           else {
               Ex14.swap(a, lo, hi);
               return Ex14.partition2(a, lo, hi-1, pivot);
       }
   }
   static int medianLocation(int[] a, int i, int j, int k) {
       if (a[i] <= a[j])
           if (a[j] <= a[k])
               return j;
           else if (a[i] <= a[k])
               return k;
           else return i;
           else
           if (a[i] <= a[k])
               return i;
           else if (a[j] <= a[k])
               return k;
           else return j;
   }         
}

class Math
{
	static int max(int a, int b)
	{
		if(a>b)
		{
			return a;
		}
		else
		{
			return b;
		}
	}

}